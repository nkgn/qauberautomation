
import TestResources.PageResources;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;

/**TC: VIEW REPORT
 * Preconditions:
 * Login as a super user. Create an entity, create report.
 *
 * Steps
 * 1. Once report is created successfully, click on View Reports
 * 2. Verify that autogenerated report ID from preview and report ID on URL match
 *
 * The code works for all three types of users: Super, Admin and Regular. Substitute the credentials on line 45 and 46 to check how different users are able to view reports.
 * Created by jaishree on 3/24/17.
 */
public class test {
    WebDriver driver; //creates an object driver to use in browser
    public PageResources pageResources; //gain access to Page class using Pageresource
    public String InitialString; //declaring general variables to be used in @Before and @Test for verification (comparison of values)
    public int GeneratedReportNumber;
    public int ExpReportNumber;

    @BeforeTest
    //setting up browser driver for test, executing Preconditions: logging in as RU, adding a report

    public void setup() throws InterruptedException {
        System.setProperty("webdriver.chrome.driver", "/Applications/Chromedriver");
        driver = new ChromeDriver();
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        pageResources = new PageResources(driver); //new object that acts for PageResources powered by (driver)
        driver.get("http://testwave.qabidder.net/#/page/login");
        Thread.sleep(4000);
        pageResources.getLogin().setUserName().sendKeys("superuser@getnada.com");
        pageResources.getLogin().setPassword().sendKeys("superuser");
        pageResources.getLogin().clickLogin().click();
        Thread.sleep(5000);
        pageResources.getLogin().LoginNamecheck().click();
        Thread.sleep(4000);

        String actuallogin= pageResources.getLogin().Emailcheck().getText(); //verifying credentials
        Thread.sleep(3000);
        System.out.println("The login email is "+actuallogin);
        Thread.sleep(3000);

        //Create an entity
        pageResources.getLogin().Entities().click();
        Thread.sleep(3000);
        pageResources.getLogin().AddEntity().click();
        Thread.sleep(1000);
        String EntityName = randomAlphanumeric(6).toLowerCase();
        pageResources.getCreateEntities().EntityName().sendKeys(EntityName);
        Thread.sleep(1000);
        String Address1 = randomAlphanumeric(6).toLowerCase();
        Thread.sleep(1000);
        pageResources.getCreateEntities().Address1().sendKeys(Address1);
        String City = randomAlphanumeric(6).toLowerCase();
        Thread.sleep(1000);
        pageResources.getCreateEntities().City().sendKeys(City);
        pageResources.getCreateEntities().State().sendKeys("Utah");
        Thread.sleep(1000);
        pageResources.getCreateEntities().PostalCode().sendKeys("64504");
        Thread.sleep(2000);
        System.out.println("The value of entity entered is " + EntityName);

        pageResources.getCreateEntities().Nextbutton().click();
        Thread.sleep(2000);
        pageResources.getInviteRegularUser().NextbuttonafterRegUsers().click();
        Thread.sleep(3000);
        pageResources.getInviteAdminUser().NextbuttonafterAdminUsers().click();
        Thread.sleep(3000);
        pageResources.getInviteAdminUser().Finishbtn().click();
        Thread.sleep(3000);

        pageResources.getPaypal().ExistingPaypalAccountSignin().click();
        pageResources.getPaypal().PaypalEmail().clear();
        pageResources.getPaypal().PaypalEmail().sendKeys("horridfarter@mailinator.com");
        pageResources.getPaypal().PaypalPassword().sendKeys("horridfarter");
        pageResources.getPaypal().PaypalLoginButton().click();
        Thread.sleep(7000);
        pageResources.getPaypal().AgreeandContinue().click();
        Thread.sleep(7000);

        //Start adding reports

        pageResources.getAddReports().AddingReports().click(); //starting to add reports
        Thread.sleep(2000);
        pageResources.getAddReports().NameofEntity(0).click();
        Thread.sleep(2000);
        pageResources.getAddReports().Nextbtn().click();
        Thread.sleep(2000);
        String LastName = randomAlphanumeric(6).toLowerCase();
        pageResources.getSubjectInformation().LastName().sendKeys(LastName);
        String FirstName = randomAlphanumeric(6).toLowerCase();
        pageResources.getSubjectInformation().FirstName().sendKeys(FirstName);
        pageResources.getSubjectInformation().Nextbtn().click();
        Thread.sleep(5000);
        pageResources.getIdentifiers().Nextbtn().click();
        Thread.sleep(5000);
        pageResources.getIdInformation().Nextbtn().click();

        String state = randomAlphanumeric(6).toLowerCase();
        pageResources.getDistribution().LocationOfstop().sendKeys(state);
        Thread.sleep(2000);
        pageResources.getDistribution().Nextbtn().click();
        Thread.sleep(3000);
        pageResources.getVehicle().Nextbtn().click();
        Thread.sleep(2000);
        pageResources.getPhotos().Nextbtn().click();
        Thread.sleep(2000);

        //Getting First Name, Last Name, Expected Report Number(this one generated by the system), from preview and printing em out

        String expectedfirstName = driver.findElement(By.xpath("//div[@class='col-sm-4 form-group'][./span='First Name']//div[@class='text-bold ng-binding']")).getText();
        String expectedlastName = driver.findElement(By.xpath("//div[@class='col-sm-4 form-group'][./span='Last Name']//div[@class='text-bold ng-binding']")).getText();
        String expectedreportnumber = driver.findElement(By.xpath("//div[@class='col-sm-4 form-group'][./span='Report ID']//div[@class='text-bold ng-binding']")).getText().trim();
        String expectedreportname = expectedfirstName + " " +expectedlastName;
        System.out.println("Expected report name is " + expectedreportname);
        System.out.println("Expected report number is " + expectedreportnumber);
        Thread.sleep(6000);

        pageResources.getPreview().Publishbtn().click(); //Publishing the report
        Thread.sleep(3000);
        pageResources.getPreview().Confirm().click();
        Thread.sleep(3000);
        //Retrieving the value of the generated Report ID + Name displayed by xpath
        InitialString = driver.findElement(By.xpath("//div[@class='col-lg-12']//h4[@class='ng-binding']")).getText();
        //Retrieving the Report number(int) alone from the whole string
        Matcher matcher1 = Pattern.compile("\\d+").matcher(InitialString);
        matcher1.find();
        GeneratedReportNumber = Integer.valueOf(matcher1.group());
        Thread.sleep(3000);
        //Printing the report number out
        System.out.println("The Report number :  "+GeneratedReportNumber);
        Thread.sleep(5000);

        //The preview generated report number on line 83 is a string
        //The generated report number on View, isolated is an Int.
        //converting the preview generated report number on Line 83 into an int: in line 108
        ExpReportNumber = Integer.valueOf(expectedreportnumber);
        //Now, compare  ExpReportNumber is an int, we assert/compare the URLReportNumber which is also an int, which comes in line 121.
    }
        @Test //(Actual Test starts after preconditions are met: straightaway check View function)

        public void testcase() throws InterruptedException {
            //Clicking View button
            pageResources.getViewReports().ViewButton().click();
            Thread.sleep(5000);
            //Getting the URL of the page: format: http://testwave.qabidder.net/#/app/report/5087
            String url = driver.getCurrentUrl();
            //Isolating the number part: 5087 for example, as an int
            Matcher matcher2 = Pattern.compile("\\d+").matcher(url);
            matcher2.find();
            int URLReportNumber = Integer.valueOf(matcher2.group());
            Thread.sleep(3000);
            System.out.println("The Report number :  " + URLReportNumber);

            //Report particulars
            String ReportNumber = pageResources.getViewSpecificReport().ReportNumber().getText();
            String CreatedDate = pageResources.getViewSpecificReport().CreatedDate().getText();
            String CreatedTime = pageResources.getViewSpecificReport().CreatedTime().getText();
            String FirstName = pageResources.getViewSpecificReport().FirstName().getText();
            String LastName = pageResources.getViewSpecificReport().LastName().getText();
            String OfficerName = pageResources.getViewSpecificReport().OfficerName().getText();
            //Printing em out
            System.out.println("Report number: " + ReportNumber);
            System.out.println("Date Created: " + CreatedDate);
            System.out.println("Time Created: " + CreatedTime);
            System.out.println("First name on Viewed Report: " + FirstName);
            System.out.println("Last name on Viewed Report: " + LastName);
            System.out.println("Officer Name on Duty: " + OfficerName);

            //Verification: does the URLReportID match the generated report number for the details we entered?


            /*try {
                Assert.assertEquals(URLReportNumber, GeneratedReportNumber);
                System.out.println("Expected report numbers match, View Report test successful");
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Reports do not match");
            }*/

            //As specified in line 109, running another check!
            try {
                Assert.assertEquals(ExpReportNumber, URLReportNumber);
                System.out.println("Expected report numbers match, View Report test successful");
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Reports do not match");
            }
        }
            @AfterTest
            public void Cleanup() throws InterruptedException {
                //Deleting Entity 1
                Thread.sleep(5000);
                pageResources.getLogin().Entities().click();
                pageResources.getEntities().Deletebtn1().click();
                Thread.sleep(2000);
                pageResources.getEntities().ConfirmDelete().click();
                Thread.sleep(2000);
                System.out.println("Entity cleaned up after test");

                driver.close();
                driver.quit();


            }





}
