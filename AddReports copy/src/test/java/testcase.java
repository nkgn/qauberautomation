import Pages.DataProvidersClass;
import TestResources.PageResources;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import java.io.File;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric;

/**Regular User can add reports
 * Precondition: Login as a super user, create entity.
 * 1. Once in Main navigation, click on Add Reports
 * 2. On each tab, fill out the mandatory fields (First Name, Last Name, Location of Stop)
 * 3. On tabs which don't need input(non mandatory), just click on Next
 * 4. On the preview tab, get the First name, last name and the report id(autogenerated), using xpath
 * 4. Publish the report
 * 5. On the Reports page(which you're taken to automatically), get the published report name+ report number
 * 6. Isolate the report number and name.
 * 7. Compare the report number published(unique id) with the one on the Preview tab in step 4
 * 8. Assert and print whether test succeeds
 *
 *
 * Created by jaishree on 3/24/17.
 */
public class testcase {

    WebDriver driver; //creates an object driver to use in browser
    public PageResources pageResources; //gain access to Page class using Pageresource

    @BeforeTest
    //setting up browser driver for test

    public void setup() {
        System.setProperty("webdriver.chrome.driver", "/Applications/Chromedriver");
        driver = new ChromeDriver();
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        pageResources = new PageResources(driver); //new object that acts for PageResources powered by (driver)
    }

    @Test(dataProviderClass = DataProvidersClass.class, dataProvider = "SuperUserCreds")

    public void testcase(String email, String password) throws Exception {

        //Open webpage, go to pageresources, call linked/nested functions and enter values
        driver.get("http://testwave.qabidder.net/#/page/login");
        Thread.sleep(4000);

        pageResources.getLogin().setUserName().sendKeys(email);

        pageResources.getLogin().setPassword().sendKeys(password);

        pageResources.getLogin().clickLogin().click();
        Thread.sleep(4000);

        pageResources.getLogin().LoginNamecheck().click();
        Thread.sleep(4000);

        String actuallogin = pageResources.getLogin().Emailcheck().getText();
        Thread.sleep(2000);

        //checking with assert if login is successful: with xpath of login page

        try {
            Assert.assertEquals(actuallogin, email);
            //    If the message is displayed
            System.out.println("Login Successful");
        } catch (Exception e) {
            e.printStackTrace();
            //If the message is not displayed
            System.out.println("Login failed");
        }

        //Create an entity

        pageResources.getLogin().Entities().click();
        Thread.sleep(3000);
        pageResources.getLogin().AddEntity().click();
        Thread.sleep(1000);
        String EntityName = randomAlphanumeric(6).toLowerCase();
        pageResources.getCreateEntities().EntityName().sendKeys(EntityName);
        Thread.sleep(1000);
        String Address1 = randomAlphanumeric(6).toLowerCase();
        Thread.sleep(1000);
        pageResources.getCreateEntities().Address1().sendKeys(Address1);
        String City = randomAlphanumeric(6).toLowerCase();
        Thread.sleep(1000);
        pageResources.getCreateEntities().City().sendKeys(City);
        pageResources.getCreateEntities().State().sendKeys("Utah");
        Thread.sleep(1000);
        pageResources.getCreateEntities().PostalCode().sendKeys("64504");
        Thread.sleep(2000);
        System.out.println("The value of entity entered is " + EntityName);

        pageResources.getCreateEntities().Nextbutton().click();
        Thread.sleep(2000);
        pageResources.getInviteRegularUser().NextbuttonafterRegUsers().click();
        Thread.sleep(3000);
        pageResources.getInviteAdminUser().NextbuttonafterAdminUsers().click();
        Thread.sleep(3000);
        pageResources.getInviteAdminUser().Finishbtn().click();
        Thread.sleep(3000);

        pageResources.getPaypal().ExistingPaypalAccountSignin().click();
        pageResources.getPaypal().PaypalEmail().clear();
        pageResources.getPaypal().PaypalEmail().sendKeys("horridfarter@mailinator.com");
        pageResources.getPaypal().PaypalPassword().sendKeys("horridfarter");
        pageResources.getPaypal().PaypalLoginButton().click();
        Thread.sleep(7000);
        pageResources.getPaypal().AgreeandContinue().click();
        Thread.sleep(7000);

        //Go to main page, go to Add Reports and start adding details
        pageResources.getAddReports().AddingReports().click();
        Thread.sleep(2000);
        //Since there may be multiple entities assigned to the user signed in (in future), specifying the first entity radio button(index=0) to be selected

        //xpath change: getting the row of the generic entity: the radio button. The first out of n radio buttons will be selected, which means by running this code,
        //by default the first entity radio button that appears on the screen will be selected
        pageResources.getAddReports().Departmentname().click();
        Thread.sleep(2000);
        pageResources.getAddReports().Nextbtn().click();
        Thread.sleep(2000);
        String LastName = randomAlphanumeric(6).toLowerCase();
        pageResources.getSubjectInformation().LastName().sendKeys(LastName);
        String FirstName = randomAlphanumeric(6).toLowerCase();
        pageResources.getSubjectInformation().FirstName().sendKeys(FirstName);
        pageResources.getSubjectInformation().Nextbtn().click();
        Thread.sleep(5000);
        pageResources.getIdentifiers().Nextbtn().click();
        Thread.sleep(5000);
        pageResources.getIdInformation().Nextbtn().click();
        Thread.sleep(5000);

        String state = randomAlphanumeric(6).toLowerCase();

        pageResources.getDistribution().LocationOfstop().sendKeys(state);
        Thread.sleep(2000);
        pageResources.getDistribution().Nextbtn().click();
        Thread.sleep(2000);
        pageResources.getVehicle().Nextbtn().click();
        Thread.sleep(2000);
        pageResources.getPhotos().Nextbtn().click();
        Thread.sleep(2000);

        //We're on the Preview tab. Gathering the report specifics and printing em out from here
        String expectedfirstName = driver.findElement(By.xpath("//div[@class='col-sm-4 form-group'][./span='First Name']//div[@class='text-bold ng-binding']")).getText();
        String expectedlastName = driver.findElement(By.xpath("//div[@class='col-sm-4 form-group'][./span='Last Name']//div[@class='text-bold ng-binding']")).getText();
        String expectedreportnumber = driver.findElement(By.xpath("//div[@class='col-sm-4 form-group'][./span='Report ID']//div[@class='text-bold ng-binding']")).getText().trim();
        String expectedreportname = expectedfirstName + " " + expectedlastName;
        System.out.println("Expected report name is " + expectedreportname);
        System.out.println("Expected report number is " + expectedreportnumber);
        Thread.sleep(3000);
        //Publishing the report
        pageResources.getPreview().Publishbtn().click();
        pageResources.getPreview().ConfirmPublish().click();
        Thread.sleep(5000);
        //Getting the whole namestring from the Published report: eg. 5091. ifdw9s 4yikwh
        String stringinitial = driver.findElement(By.xpath("//div[@class='col-lg-12']//h4[@class='ng-binding']")).getText();
        //Retrieving the name part from line 117: ifdw9s 4yikwh
        String actualreportname = stringinitial.substring(stringinitial.lastIndexOf(".") + 1).trim();
        System.out.println("Actual report name is " + actualreportname);
        //Asserting whether expected and actual report names match
        try {
            Assert.assertEquals(actualreportname, expectedreportname);
            System.out.println("Expected report names match");
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Reports do not match");
        }

        //Retrieving the number part from line 117: eg. 5091, it's an int now
        //Typecasting string to integer
        Matcher matcher1 = Pattern.compile("\\d+").matcher(stringinitial);
        matcher1.find();
        int ActualReportnumber = Integer.valueOf(matcher1.group());
        Thread.sleep(3000);
        //Printing out the int: So visually the actual and expected report numbers match.
        //Not running an assert as this actualreportnumber is an int, and the expectedactualreportnumber is a string. No comparison.
        System.out.println("Actual report number is " + ActualReportnumber);
        System.out.println("Add report succeeds");

    }

    @AfterTest
    public void Cleanup() throws InterruptedException {
        //Deleting Entity 1
        Thread.sleep(5000);
        pageResources.getLogin().Entities().click();
        pageResources.getEntities().Deletebtn1().click();
        Thread.sleep(2000);
        pageResources.getEntities().ConfirmDelete().click();
        Thread.sleep(2000);
        System.out.println("Entity cleaned up after test");


        driver.close();
        driver.quit();

    }


}





